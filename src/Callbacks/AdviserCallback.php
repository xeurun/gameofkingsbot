<?php

namespace App\Callbacks;

use App\Entity\User;
use App\Factory\CallbackFactory;
use App\Interfaces\AdviserInterface;
use App\Interfaces\ScreenInterface;
use App\Interfaces\TranslatorInterface;
use App\Manager\BotManager;
use App\Screens\MainMenuScreen;
use Longman\TelegramBot\Entities\ServerResponse;
use Longman\TelegramBot\Request;

class AdviserCallback extends BaseCallback
{
    /**
     * @return ServerResponse
     */
    public function execute(): ServerResponse
    {
        $data = $this->tutorial();

        return Request::answerCallbackQuery($data);
    }

    /**
     * @return array
     * @throws
     */
    public function tutorial(): array
    {
        $kingdom = $this->botManager->getKingdom();
        $message = $this->callbackQuery->getMessage();
        $callbackData = CallbackFactory::getData($this->callbackQuery);
        $c = $callbackData[1];
        $data = [
            'chat_id' => $this->botManager->getUser()->getId(),
            'message_id' => $message->getMessageId(),
            'parse_mode' => 'Markdown'
        ];
        if ($c === '1') {
            switch ($kingdom->getAdviserState()) {
                case AdviserInterface::ADVISER_SHOW_INITIAL_TUTORIAL:
                    $name = ScreenInterface::SCREEN_TREASURE;
                    $data['text'] = <<<TEXT
*–°–æ–≤–µ—Ç–Ω–∏–∫*: –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ ¬´{$name}¬ª

_(—Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)_
TEXT;
                    $kingdom->setAdviserState(AdviserInterface::ADVISER_SHOW_WAREHOUSE_TUTORIAL);
                    break;
                case AdviserInterface::ADVISER_SHOW_WAREHOUSE_TUTORIAL:
                    $name = ScreenInterface::SCREEN_EDICTS;
                    $data['text'] = <<<TEXT
*–°–æ–≤–µ—Ç–Ω–∏–∫*: —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ ¬´{$name}¬ª

_(—Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)_
TEXT;
                    $kingdom->setAdviserState(AdviserInterface::ADVISER_SHOW_EDICTS_TUTORIAL);
                    break;
                case AdviserInterface::ADVISER_SHOW_EDICTS_TUTORIAL:
                    $name = ScreenInterface::SCREEN_BUILDINGS;
                    $data['text'] = <<<TEXT
*–°–æ–≤–µ—Ç–Ω–∏–∫*: –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥–∞–≤–∞–π—Ç–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –ø—Ä–æ ¬´{$name}¬ª

_(–Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)_
TEXT;
                    $kingdom->setAdviserState(AdviserInterface::ADVISER_SHOW_BUILDINGS_TUTORIAL);
                    break;
                case AdviserInterface::ADVISER_SHOW_BUILDINGS_TUTORIAL:
                    $name = ScreenInterface::SCREEN_PEOPLE;
                    $data['text'] = <<<TEXT
*–°–æ–≤–µ—Ç–Ω–∏–∫*: –∞ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º ¬´{$name}¬ª

_(–Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)_
TEXT;
                    $kingdom->setAdviserState(AdviserInterface::ADVISER_SHOW_PEOPLE_TUTORIAL);
                    break;
                case AdviserInterface::ADVISER_SHOW_PEOPLE_TUTORIAL:
                    $name = ScreenInterface::SCREEN_BONUSES;
                    $back = ScreenInterface::SCREEN_BACK;
                    $data['text'] = <<<TEXT
*–°–æ–≤–µ—Ç–Ω–∏–∫*: –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–∞–º–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º—É ¬´{$name}¬ª

_(–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É {$back}, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É {$name})_
TEXT;
                    $kingdom->setAdviserState(AdviserInterface::ADVISER_SHOW_BONUSES_TUTORIAL);
                    break;
                case AdviserInterface::ADVISER_SHOW_BONUSES_TUTORIAL:
                    $gender = $this->botManager->getTranslator()->transChoice(
                        TranslatorInterface::TRANSLATOR_MESSAGE_NEW_KING_GENDER,
                        $this->botManager->getUser()->getGender() === User::AVAILABLE_GENDER_KING ? 1 : 0,
                        [],
                        TranslatorInterface::TRANSLATOR_DOMAIN_STATE
                    );

                    $data['text'] = <<<TEXT
*–°–æ–≤–µ—Ç–Ω–∏–∫*: –Ω—É –≤–æ—Ç –ø–æ–∫–∞ –∏ –≤—Å–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ —á–µ–º –≤–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –µ—â–µ, —è –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â—é {$gender}

_(–ø—É–Ω–∫—Ç—ã —Å–æ –∑–Ω–∞–∫–æ–º üîú –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –º—ã –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Å –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–º –Ω–∞–¥ –Ω–∏–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å)_
TEXT;
                    $kingdom->setAdviserState(null);
                    break;

            }
            Request::editMessageText($data);
        } else {
            $kingdom->setAdviserState(null);
            Request::deleteMessage($data);
        }

        $this->botManager->getEntityManager()->persist($kingdom);
        $this->botManager->getEntityManager()->flush();

        $data = [
            'callback_query_id' => $this->callbackQuery->getId(),
            'show_alert' => false
        ];

        $data['text'] = '–ö–∞–∫ –ø—Ä–∏–∫–∞–∂–µ—Ç–µ!';

        return $data;
    }
}
